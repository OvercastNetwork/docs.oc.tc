.container
    .jumbotron.subhead
        %h1 Modules
        %p.lead Filters & Regions
    %section
        .row
            = partial('modules_sidebar')
            .col-sm-9
                .page-header
                    %h1 Filters
                :markdown
                    Filters are used to filter player, block, spawn and world events in regions. On their own filters do nothing, they have to be applied to regions to do something. Filters return one of three possible states for query and these results can be modified with filter matchers. The filter's name is used to reference it inside other filters and regions.

                    * `ALLOW` The filter specifically allows the query.
                    * `DENY` The filter specifically denies the query.
                    * `ABSTAIN` None of the filters queried have any opinion on the subject.

                    Abstain is usually interpreted as allow, this means that if the filter doesn't explicitly deny the query it will be allowed.

                        <filters>
                            <filter name="filter-name">
                                <!-- Filter elements -->
                            </filter>

                            <!-- More filters-->
                        </filters>

                :markdown
                    <br/>
                    ##### Master Filters
                    These are the main filters that can be used to allow or deny all of a certain type of event.
                .table-responsive
                    %table.table.table-striped.table-hover.table-condensed.table-bordered
                        %thead
                            %tr
                                %th{:colspan => "2"} Name
                                %th Description
                        %tdata
                            %tr
                                %td
                                    %code allow-all
                                %td
                                    %code deny-all
                                %td Filter all events.
                            %tr
                                %td
                                    %code allow-players
                                %td
                                    %code deny-players
                                %td Filter player access.
                            %tr
                                %td
                                    %code allow-blocks
                                %td
                                    %code deny-blocks
                                %td Filter block breaking and placing.
                            %tr
                                %td
                                    %code allow-world
                                %td
                                    %code deny-world
                                %td Filter block transformations such as fire spread, water flowing, etc.
                            %tr
                                %td
                                    %code allow-spawns
                                %td
                                    %code deny-spawns
                                %td Filter player spawning.
                            %tr
                                %td
                                    %code allow-entities
                                %td
                                    %code deny-entities
                                %td Filter entities.
                            %tr
                                %td
                                    %code allow-mobs
                                %td
                                    %code deny-mobs
                                %td Filter all mob spawns, regardless of type.


                :markdown
                    <br/>
                    #### Filter Matchers
                    Filters can have matchers to allow things such as blocking all player access and then allowing a certain team access. Matchers are usually used inside filter modifier elements.

                        <filter name="filter1"/>
                        <team>team name</team>
                        <block>block name</block>

                        <spawn>spawn reason</spawn>
                        <mob>mob name</mob>
                        <entity>entity name</entity>

                    For a examples on how to use the `<spawn>` & `<mob>` elements see [mob spawning](/modules/mobs).


                    <br/>
                    #### [Filter Modifiers](id:filterModifiers)
                    To modify filters with matchers or combine the results of multiple filters use these modifiers. The filter element defaults to `<any>` style matching.

                .table-responsive
                    %table.table.table-striped.table-hover.table-condensed.table-bordered
                        %thead
                            %tr
                                %th Name
                                %th Description
                        %tdata
                            %tr
                                %td
                                    %code &lt;not&gt;&lt;/not&gt;
                                %td Invert the filters result. Returns <code>DENY</code> if the sub filter returns <code>ALLOW</code>, <code>ALLOW</code> if the sub filter returns <code>DENY</code> and <code>ABSTAIN</code> if it returns <code>ABSTAIN</code>.
                            %tr
                                %td
                                    %code &lt;one&gt;&lt;/one&gt;
                                %td Returns <code>ALLOW</code> if exactly one of the sub-filters returns <code>ALLOW</code>, <code>ABSTAIN</code> if none of the sub-filters specify a preference on the query, and <code>DENY</code> if there are more than one sub filter that specifies <code>ALLOW</code> or none specify <code>ALLOW</code> and at least one specifies <code>DENY</code>.
                            %tr
                                %td
                                    %code &lt;all&gt;&lt;/all&gt;
                                %td Returns <code>ALLOW</code> if all of the sub-filters specify <code>ALLOW</code>, <code>ABSTAIN</code> if none of the sub-filters specify a preference on the query, and <code>DENY</code> if one or more of the sub-filters specify <code>DENY</code>.

                            %tr
                                %td
                                    %code &lt;any&gt;&lt;/any&gt;
                                %td Returns <code>ALLOW</code> if any of the sub-filters return <code>ALLOW</code>, <code>ABSTAIN</code> if none of the sub-filters specify a preference on the query, and <code>DENY</code> if none of the sub-filters specify <code>ALLOW</code> and at least one sub filter specified <code>DENY</code>.


                :markdown
                    Examples

                        <filters>
                            <filter name="only-gold">
                                <block>gold block</block>
                            </filter>

                            <!-- Applied with block="" filter will only allow red team to place blocks. -->
                            <!-- Applied with enter="" filter will only allow red team to enter region. -->
                            <filter name="red-team">
                                <team>red</team>
                            </filter>
                        </filters>

                    ````
                    <filters>
                        <filter name="no-tnt">
                            <not><block>TNT</block></not>
                        </filter>
                    </filters>
                    ````

                    The player wants to place a TNT block, the filter gets asked; "Is this block place-able?". The filter checks the `<block>` matcher, it matches and returns `ALLOW`. The block matcher is contained in a `<not>` modifier so the `ALLOW` gets turned into a `DENY`.

                    <br/>
                    Example from [Snowy Wars](http://maps.oc.tc/DTM/Standard/Snowy%20Wars/map.xml)

                        <filters>
                            <filter name="deny-icemelt">
                                <not><all><!-- DENY if world and ice, ALLOW if not world, ABSTAIN if world and not ice -->
                                    <any><!-- ALLOW if world, DENY else -->
                                        <filter name="allow-world"/>
                                        <filter name="deny-all"/>
                                    </any>
                                    <block>ice</block><!-- ALLOW if ice, ABSTAIN else -->
                                </all></not>
                            </filter>
                        </filters>

                    First we specify the filter and its name `(deny-icemelt)`. Then what we filter gets put into a `<all>` matcher and then into a `<not>` matcher.
                    So `<all>` that we filter has to `<not>` be true for the filter to allow.

                    We also have a `<any>` matcher with two filters in it, this means that the filter gets checked twice. Once for `allow-world` and then again for `deny-all`.

                    The following things get checked:

                        <!-- Returns allow if the the caller is world and the block is ice -->
                        <!-- So we allow natural melting of the ice but then deny it with the <not> matcher -->
                        <all>
                            <filter name="allow-world"/>
                            <block>ice</block>
                        </all>

                        <!-- Returns deny if the block is ice. -->
                        <!-- So we deny breaking of ice blocks but then allow it with the <not> matcher -->
                        <all>
                            <filter name="deny-all"/>
                            <block>ice</block>
                        </all>


                    So for the ice to be able to melt or be broken all of the following have to be true.

                    * If the caller is the world (allow-world) and the block is ice then do `<not>` allow.
                    * If the caller is anything else (deny-all) and the block is ice then allow.
                    * If the block is not ice abstain, i.e. ignore the filter and continue as normal.

                    Also see: [Viridun](https://maps.oc.tc/TDM/Standard/Viridun/map.xml)


                    <br/>
                    #### [Void Filter](id:voidFilter)

                    If your map is especially complex shaped you may have to use the `<void/>` tag to shape your filtered region.
                    The `<void/>` tag checks the specified regions for blocks on the bottom layer of the world. It then creates an outline of those blocks and the specified filter is only active inside or outside that outline. Bridges are usually not detected because they are not at `y=0`. This can be fixed by creating a invisible silhouette of the bridge with block 36 at `y=0`.

                    <br/>
                    Example from [RFV3](https://maps.oc.tc/CTW/Standard/RFV3/map.xml)

                        <filters>
                            <filter name="no-void" parents="allow-all">
                                <deny><void/></deny>
                            </filter>
                        </filters>

                        <regions>
                            <apply block="no-void" message="You may not edit the void area">
                                <negative>
                                    <rectangle min="-14,-12" max="15,13"/>
                                    <region name="portals"/>
                                </negative>
                            </apply>
                        </regions>

                    <br>
                    <hr>
                    #### Legacy Style Filters
                    <div class="alert alert-warning"><strong>Note!</strong> This filter behavior will be depreciated in proto 2.0.</div>

                    Legacy style filters use the `<allow>` and `<deny>` elements with the filter `parents=""` attribute to modify what gets filtered. This behavior is not compatible with the new format introduced in proto `v1.3.0` and can not be combined in the same filter.

                    #####  Filter Modifiers
                .table-responsive
                    %table.table.table-striped.table-hover.table-condensed.table-bordered
                        %thead
                            %tr
                                %th Name
                                %th Description
                        %tdata
                            %tr
                                %td
                                    %code &lt;allow&gt;&lt;filter name="filter1"/&gt;..&lt;/allow&gt;
                                %td Allow containing filter matchers.
                            %tr
                                %td
                                    %code &lt;deny&gt;&lt;filter name="filter1"/&gt;..&lt;/deny&gt;
                                %td Deny containing filter matchers.
                :markdown
                    Example

                        <filters>
                            <filter name="only-red" parents="deny-players">
                                <allow><team>red</team></allow>
                            </filter>

                            <filter name="gold-blocks" parents="deny-block">
                                <allow><block>gold block</block></allow>
                            </filter>

                            <filter name="no-tnt" parents="allow-all">
                                <deny><block>TNT</block></deny>
                            </filter>
                        </filters>
