.container
    .jumbotron.subhead
        %h1
            = @page_title = "Modules"
    %section
        .row
            - @page_nav_content = [
            - {"path" => "#list", "name" => "Filter Matchers"},\
            - {"path" => "#filterModifiers", "name" => "Filter Modifiers"},\
            - {"path" => "#killStreakFilter", "name" => "Kill-Streak Filter"},\
            - {"path" => "#randomFilter", "name" => "Random Filter"},\
            - {"path" => "#rank_score", "name" => "Rank & Score Filters"},\
            - {"path" => "#players", "name" => "Player Count Filter"},\
            - {"path" => "#objectiveFilter", "name" => "Objective Filter"},\
            - {"path" => "#flagFilter", "name" => "Flag Filters"},\
            - {"path" => "#causeFilters", "name" => "Event Cause Filter"},\
            - {"path" => "#relationFilters", "name" => "Player Relation Filter"},\
            - {"path" => "#itemFilters", "name" => "Item Filters"},\
            - {"path" => "#structuralLoadFilters", "name" => "Structural Load Filter"},\
            - {"path" => "#voidFilter", "name" => "Void Filter"},\
            - ]
            = partial('modules_sidebar')

            .col-sm-9
                .page-header
                    %h1
                        = partial('page_nav_dropdown')
                        = @page_sub_title = "Filters"

                :markdown
                    Filters are true/false conditions about players, blocks, or the match in general.
                    Other modules use filters to decide *if* and *when* things should happen to those players, blocks, or the entire match.

                    Filters are built from **matchers** and **modifiers**.
                    Matchers are specific questions, like

                    * is it made of wood?
                    * is he/she on the Red Team?
                    * is it inside region X?
                    * has the match run past 5 minutes?

                    Modifiers can combine questions using logic, such as

                    * A and B
                    * A or B
                    * not A
                    * (A or B) and not (A and B)

                    Modifiers can also transform the meaning of questions, or answers, in various ways.

                    The documentation for other modules will explain where filters can be used, and how the filter affects the module's behavior.
                    Generally, other modules use filters in one of two ways:
                %ul
                    %li
                        %em Passively,
                        which means whenever the module wants to do its thing, it will check the filter to decide if it should be done or not.
                    %li
                        %em Dynamically,
                        in which case the filter will notify the module when it's time to do something, and who or what it should be done to.
                %p
                    Only filters labeled
                    %span.label.label-primary Dynamic
                    are capable of the latter.
                    Modules that require dynamic filters will say so in their documentation.

                :markdown
                    ### Abstaining
                    Some filters don't make sense in certain contexts.
                    For example, you can't ask if a block is on the Red Team, or if a player is made of wood, or if the match is inside a region.

                    Some modules will generate an error if you try to use the wrong type of filter, but other modules may allow it.
                    When a filter doesn't apply to a particular decision, it will **abstain** from that decision, and things will behave as they would if the filter didn't exist.
                    Generally, you should avoid using filters in such a way that they can abstain, since it tends to be confusing.

                    However, the [event rules module](/modules/regions#applying) uses filter abstention to make very complex conditions easier to express:
                    It accepts a *chain* of filters, and uses the first filter in the chain that doesn't abstain.

                    Filters can be *forced* to abstain using the `<allow>` and `<deny>` modifiers.

                    ### Defining Filters
                    Filters can be defined inside the top-level `<filters>` element,
                    and assigned an `id` used to reference them elsewhere.

                        <filters>
                            <any id="filter-name">
                                <!-- Filter elements -->
                            </any>

                            <team id="viridescent-team-filter">viridescent-team</team>

                            <!-- More filters-->
                        </filters>

                    <br/>
                    ### [Matcher Elements](id:list)
                    Filter matchers test for specific conditions or properties of things.

                .table-responsive
                    %table.table.table-striped.table-condensed
                        %thead
                            %tr
                                %th{:style => "min-width: 300px;"} Element
                                %th Description
                                %th
                        %tbody
                            %tr
                                %th{colspan: 3} Generic filters (apply to anything)
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<filter id="filter1"/>')
                                %td Reference a filter by its ID.
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<always/>')
                                %td
                                    Matches/allows everything.<br/>
                                    Can be referenced with the ID <code>always</code>
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<never/>')
                                %td
                                    Matches nothing/denies everything.<br/>
                                    Can be referenced with the ID <code>never</code>
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<match-started/>')
                                %td
                                    Filter if the match has started.
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<match-running/>')
                                %td
                                    Filter if the match is running.
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<match-finished/>')
                                %td
                                    Filter if the match is over.
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<time>duration</time>')
                                %td
                                    Filter if the specified
                                    %a{:href => "/reference/time_periods"} time period
                                    has elapsed since the match started.
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<objective>objective_id</objective>')
                                %td
                                    %a.left-ref-link{:href=>"#objectiveFilter"} <i class="fa fa-chevron-down"></i>
                                    Match completed objectives.
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<flag-carried>flag_id</flag-carried>')
                                %td
                                    %a.left-ref-link{:href=>"#flagFilter"} <i class="fa fa-chevron-down"></i>
                                    Match if the flag is being carried by anyone.
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<flag-dropped>flag_id</flag-dropped>')
                                %td
                                    %a.left-ref-link{:href=>"#flagFilter"} <i class="fa fa-chevron-down"></i>
                                    Match if the flag is dropped on the ground.
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<flag-returned>flag_id</flag-returned>')
                                %td
                                    %a.left-ref-link{:href=>"#flagFilter"} <i class="fa fa-chevron-down"></i>
                                    Match if the flag is at the return-point.
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<flag-captured>flag_id</flag-captured>')
                                %td
                                    %a.left-ref-link{:href=>"#flagFilter"} <i class="fa fa-chevron-down"></i>
                                    Match if the flag has been captured.
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %th{colspan: 3} Spatial filters (apply to anything with a physical location)
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<void/>')
                                %td
                                    %a.left-ref-link{:href=>"#voidFilter"} <i class="fa fa-chevron-down"></i>
                                    Match if the flag has been captured.
                                %td
                            %tr
                                %td{colspan: 3}
                                    %em
                                        Any
                                        %a{href: "/modules/regions"} region
                                        element
                            %tr
                                %th{colspan: 3} Block filters
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<material>block</material>')
                                %td
                                    Matches blocks by their
                                    %a{:href => "/reference/inventory#material_finder"} Material
                                    name.
                                    %br
                                    Accepts a
                                    %a{:href => "/reference/inventory#material_matchers"} Single Material Pattern
                                %td
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<structural-load>2</structural-load>')
                                %td
                                    %a.left-ref-link{:href=>"#structuralLoadFilters"} <i class="fa fa-chevron-down"></i>
                                    Test the number of other gravity blocks that the queried block is supporting.
                                %td
                            %tr
                                %th{colspan: 3} Entity filters
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<spawn>spawn reason</spawn>')
                                %td
                                    Matches spawn event reasons, see
                                    %a{:href=>"/modules/mobs"} mob spawning
                                %td
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<mob>mob name</mob>')
                                %td
                                    Matches mobs by their name, see
                                    %a{:href=>"/modules/mobs"} mob spawning
                                %td
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<entity>entity name</entity>')
                                %td Match entities, e.g. projectiles, boats, dropped items, etc.
                                %td
                            %tr
                                %th{colspan: 3} Competitor filters (apply to teams, or FFA players)
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<rank> </rank>')
                                %td
                                    %a.left-ref-link{:href=>"#rank_score"} <i class="fa fa-chevron-down"></i>
                                    Match if the player or team's rank is within the specified range.
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<score> </score>')
                                %td
                                    %a.left-ref-link{:href=>"#rank_score"} <i class="fa fa-chevron-down"></i>
                                    Match if the player or team's score is within the specified range.
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<carrying-flag>flag_id</carrying-flag>')
                                %td
                                    %a.left-ref-link{:href=>"#flagFilter"} <i class="fa fa-chevron-down"></i>
                                    Match the team/player carrying the specified flag.
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %th{colspan: 3} Player filters
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<participating/>')
                                %td
                                    Match if the player is participating in the match.
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<observing/>')
                                %td
                                    Match if the player is observing the match.
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<team>team</team>')
                                %td Matches a team by its ID.
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %td
                                    %span.highlight.xml
                                        %code= html_escape('<class>class name</class>')
                                %td
                                    Match players with the specified class.
                                %td
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<kill-streak/>')
                                %td
                                    %a.left-ref-link{:href=>"#killStreakFilter"} <i class="fa fa-chevron-down"></i>
                                    Match players with a certain range or amount of kills.
                                %td
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<crouching/>')
                                %td
                                    Match if the player is crouching.
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<walking/>')
                                %td
                                    Match if the player is walking.
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<sprinting/>')
                                %td
                                    Match if the player is sprinting.
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<flying/>')
                                %td
                                    Match if the player is flying.
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<can-fly/>')
                                %td
                                    Match if the player can fly.
                                %td
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<gliding/>')
                                %td
                                    Match if the player is gliding with an elytra.
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<grounded/>')
                                %td
                                    Match if the player is on the ground.
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<carrying><item material=""/></carrying>')
                                %td
                                    %a.left-ref-link{:href=>"#itemFilters"} <i class="fa fa-chevron-down"></i>
                                    Match if the player is carrying an item.
                                %td
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<holding><item material=""/></holding>')
                                %td
                                    %a.left-ref-link{:href=>"#itemFilters"} <i class="fa fa-chevron-down"></i>
                                    Match if the player is holding an item.
                                %td
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<wearing><item material=""/></wearing>')
                                %td
                                    %a.left-ref-link{:href=>"#itemFilters"} <i class="fa fa-chevron-down"></i>
                                    Match if the player is wearing an item.
                                %td
                            %tr
                                %th{colspan: 3} Event filters (apply to transient events)
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<cause>cause</cause>')
                                %td
                                    %a.left-ref-link{:href=>"#causeFilters"} <i class="fa fa-chevron-down"></i>
                                    Filter an event's cause.
                                %td
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<random>decimal or range</random>')
                                %td
                                    %a.left-ref-link{:href=>"#randomFilter"} <i class="fa fa-chevron-down"></i>
                                    Random chance matcher.
                                %td
                            %tr
                                %th{colspan: 3} Damage filters (apply to damage/combat events)
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<relation>relation</relation>')
                                %td
                                    %a.left-ref-link{:href=>"#relationFilters"} <i class="fa fa-chevron-down"></i>
                                    Filter an event's relation to the player.
                                %td

                :markdown
                    <br/>
                    ### [Modifier Elements](id:filterModifiers)

                    Filter modifiers are used to alter the meaning of other filters, and combine them into more complex conditions.
                    These elements must contain either a single filter, or a list of filters, as their child elements.

                .table-responsive
                    %table.table.table-striped.table-condensed
                        %thead
                            %tr
                                %th{:style => "min-width: 85px;"} Name
                                %th Description
                                %th
                        %tbody
                            %tr
                                %th{colspan: 3} Logic - combine other filters
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<not>')
                                %td Invert the filters result; allow if the child filter denies, deny if it allows, abstain otherwise.
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<one>')
                                %td Allow if <i>only one</i> of the child filters allows, deny if <i>one or more allow</i> or <i>none allow and at least one denies</i>, otherwise abstain.
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<all>')
                                %td Allow if <i>all</i> of the child filters allow, deny if <i>one or more deny</i>, otherwise abstain.
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<any>')
                                %td Allow if <i>one</i> of the child filters allows, deny if <i>none allow and at least one denies</i>, otherwise abstain.
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %th{colspan: 3} Abstention - force filters to abstain
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<allow>')
                                %td Allow if the child filter allows, otherwise abstain (transform deny to abstain).
                                %td
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<deny>')
                                %td Deny if the child filter allows, otherwise abstain.
                                %td
                            %tr
                                %th{colspan: 3} Query modifiers - change the question
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<same-team>')
                                %td
                                    Change a player question to a team question.<br/>
                                    For example, "do they have the flag?" becomes "does their team have the flag?".
                                %td
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<victim>')
                                %td
                                    Make a damage question specifically about the victim.<br/>
                                    For example, "do they have the flag?" becomes "does the victim have the flag?"
                                    %br
                                    Commonly used with the
                                    %a{:href => "/modules/damage"} damage
                                    module.
                                %td
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<attacker>')
                                %td
                                    Make a damage question specifically about the attacker.<br/>
                                    For example, "do they have the flag?" becomes "does the attacker have the flag?"
                                    %br
                                    Commonly used in the
                                    %a{:href => "/modules/damage"} damage
                                    module.
                                %td
                            %tr
                                %th{colspan: 3} Mechanisms - apply complex mechanics to other filters
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<players>')
                                %td
                                    %a.left-ref-link{:href=>"#players"} <i class="fa fa-chevron-down"></i>
                                    Count the number of players that match the inner filter.
                                %td
                                    %span.label.label-primary Dynamic
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<countdown>')
                                %td
                                    %a.left-ref-link{:href=>"#countdown"} <i class="fa fa-chevron-down"></i>
                                    Countdown from the moment that the inner filter matched.
                                %td
                                    %span.label.label-primary Dynamic

                :markdown
                    Examples

                        <filters>
                            <not id="deny-yellow-explosions">
                                <all>
                                    <team>yellow</team>
                                    <cause>explosion</cause>
                                </all>
                            </not>
                        </filters>

                    ````
                    <filters>
                        <deny id="no-tnt"><material>TNT</material></deny>
                    </filters>
                    ````

                    The player wants to place a TNT block, the filter gets asked; "Is this block place-able?". The filter checks the `<material>` matcher, it matches and returns `ALLOW`. The material matcher is contained in a `<deny>` modifier so the `ALLOW` gets turned into a `DENY`.

                    <br/>
                    #### [Kill-Streak Filter](id:killStreakFilter)

                    The kill-streak filter is a matcher that matches players who have a specified number of kills.
                    The kill counter can be set to count from the start of the match or from the last time the player died.
                    This filter is commonly used in [kill rewards](/modules/killreward) but can also be used to restrict access to certain locations, etc.

                    #####  Kill-Streak Filter Attributes

                .table-responsive
                    %table.table.table-striped.table-condensed
                        %thead
                            %tr
                                %th Attribute
                                %th Description
                                %th Value
                                %th Default
                        %tbody
                            %tr
                                %td
                                    %code min
                                %td Match players with at-least this many kills.
                                %td
                                    %span.label.label-primary Number
                                %td
                            %tr
                                %td
                                    %code max
                                %td Match players with a maximum of this many kills.
                                %td
                                    %span.label.label-primary Number
                                %td
                            %tr
                                %td
                                    %code count
                                %td
                                    Match players with exactly this many kills.
                                    %br
                                    %i Can not be mixed with the <code>min</code> & <code>max</code> attributes.
                                %td
                                    %span.label.label-primary Number
                                %td
                            %tr
                                %td
                                    %code repeat
                                %td Repeat the filter range
                                %td
                                    %span.label.label-primary true/false
                                %td false
                            %tr
                                %td
                                    %code persistent
                                %td Do not reset a players kill count when they die.
                                %td
                                    %span.label.label-primary true/false
                                %td false
                :markdown
                    Examples

                        <kill-streak min="3"/>      <!-- matches players with at least 3 kills -->
                        <kill-streak max="5"/>      <!-- matches players with at most 5 kills -->
                        <kill-streak count="4"/>    <!-- matches players with exactly 4 kills -->

                        <kill-streak id="10th-kill-filter" repeat="true" count="10"/>    <!-- match for every 10th kill -->


                    <br/>
                    #### [Random Filter](id:randomFilter)

                    This filter will randomly `ALLOW` or `DENY` when evaluated in the context of an event.
                    Its value is a decimal fraction between 0 and 1, representing the probability of `ALLOW`.

                    The value can also be an interval, in the form `[0, 1)`.
                    When the filter is evaluated, a random number is chosen, and the filter passes if the number falls within the filter's interval.
                    Multiple filters applied to the same object at the same instant will use the same random number.
                    So, if their intervals do not overlap, the filters will never both pass at the same time.
                    Using intervals in this way, any number of filters can be made mutually exclusive, or their relationships can be controlled in more complex ways.

                    A random filter can only be applied to instantaneous events, and not to conditions that persist over some span of time.
                    Specifically, they can be used in the following contexts:

                    * Regional block change rules
                    * Block drop rules
                    * Damage rules
                    * Mob spawning rules

                    In other contexts, random filters will `ABSTAIN`.

                    Examples

                        <!-- 50% chance that it will return either ALLOW or DENY -->
                        <random>0.5</random>

                        <!-- Also a 50% chance -->
                        <!-- Any number from 0.25 to 0.75 including 0.25 but excluding 0.75 -->
                        <random>[0.25, 0.75)</random>


                :markdown
                    <br/>
                    #### [Rank & Score Filters](id:rank_score)

                    The rank and score filters match if the team's or player's rank or score is a equal to a single value or within a range of values.<br/>
                    The value can be an exact amount or a interval specifying a range. Only whole numbers are valid.

                    Examples

                        <!-- Match if the team (or player in ffa) rank is 3 -->
                        <rank>3</rank>

                        <!-- Match if team (or player in ffa) has a score from 5 to 10. -->
                        <score>[5-10]</score>


                :markdown
                    <br/>
                    #### [Player Count Filter](id:players)

                    This filter counts the number of players matching a single child filter,
                    and matches if that count is within a specified range.

                    The child filter can be omitted, in which case all players in the match will be counted.

                    #####  Player Count Filter Attributes

                .table-responsive
                    %table.table.table-striped.table-condensed
                        %thead
                            %tr
                                %th Attribute
                                %th Description
                                %th Value
                                %th Default
                        %tbody
                            %tr
                                %td
                                    %code min
                                %td Minimum player count
                                %td
                                    %span.label.label-primary Number
                                %td 1
                            %tr
                                %td
                                    %code max
                                %td Maximum player count
                                %td
                                    %span.label.label-primary Number
                                %td oo (unlimited)
                            %tr
                                %td
                                    %code participants
                                %td Include participants (players actually playing) in the count.
                                %td
                                    %span.label.label-primary true/false
                                %td true
                            %tr
                                %td
                                    %code observers
                                %td Include observers in the count.
                                %td
                                    %span.label.label-primary true/false
                                %td false
                :markdown
                    Examples

                        <!-- Match if there are at least 4 players participating -->
                        <players min="4"/>

                        <!-- Match if there are 1 to 3 players sneaking in region X -->
                        <players min="1" max="3">
                            <all>
                                <sneaking/>
                                <region id="X"/>
                            </all>
                        </players>


                :markdown
                    <br/>
                    #### [Countdown Filter](id:countdown)

                    This filter matches for up to the specified amount of time after the child filter starts matching.
                    It never matches when the child filter doesn't match.

                    #####  Countdown Filter Attributes

                .table-responsive
                    %table.table.table-striped.table-condensed
                        %thead
                            %tr
                                %th Attribute
                                %th Description
                                %th Value
                                %th Default
                        %tbody
                            %tr
                                %td
                                    %code duration
                                %td Length of time to match for
                                %td
                                    %span.label.label-primary Time Period
                                %td
                            %tr
                                %td
                                    %code message
                                %td
                                    Optional timer message to display while counting down.
                                    Only players who match the filter can see the timer.
                                    If the message contains a placeholder, it will be replaced with the remaining time.
                                %td
                                    %span.label.label-primary Message Template
                                %td
                :markdown
                    Examples

                        <!-- Countdown 30s from the moment any player picks up the flag -->
                        <!-- (you could then use the countdown filter to kill them, teleport them, etc) -->
                        <countdown duration="30s" message="You have {0} to capture the flag">
                            <carrying-flag>blue-flag</carrying-flag>
                        </countdown>

                :markdown
                    <br/>
                    #### [Objective Filter](id:objectiveFilter)

                    The objective filter allows filtering of completed objectives and additionally, for hills, the team owning the objective. The filter works with cores, destroyables, wools and hills/control-points. With cores, destroyables and wools the filter will return `ALLOW` if the objective is completed and `DENY` if it is not. Its behavior for hills/control-points is slightly different from other objectives, by default it will match the player's team instead of the objectives completion.

                    Hills or control point filters will return `ALLOW` if the player's team matches the owning team, `DENY` if it doesn't, and ignore everything non-player related. However, if the filter has a team attribute the filter will not care what is being filtered and will simply return `ALLOW` if the team specified currently owns the hill. Optional the any attribute can be used to return `ALLOW` if any team owns the hill and `DENY` otherwise.

                    #####  Objective Filter Attributes

                .table-responsive
                    %table.table.table-striped.table-condensed
                        %thead
                            %tr
                                %th Attribute
                                %th Description
                                %th Value
                        %tbody
                            %tr
                                %td
                                    %code team
                                %td If the objective has ownership, e.g. hills, match objectives belonging to this team.
                                %td
                                    %a{:href => "/modules/teams"} Team ID
                            %tr
                                %td
                                    %code any
                                %td
                                    If the objective has ownership, e.g. hills, match objectives completed by any team.
                                    %br
                                    %i Not compatible with the <code>team</code> attribute
                                %td
                                    %span.label.label-primary true/false

                :markdown
                    Examples

                        <!-- deny everything before red-core leaks and allow everything after it leaks -->
                        <objective id="rc-leaked-filter">red-core</objective>


                        <!-- allow everything if blue-team owns central-hill, and deny everything if they don't -->
                        <objective team="blue-team">central-hill</objective>

                        <!-- allow everything if the south-hill is owned and deny if it isn't -->
                        <objective any="true">south-hill</objective>

                        <!-- allow any player actions by the team currently owning north-hill -->
                        <objective>north-hill</objective>


                    <br/>
                    #### [Flag Filters](id:flagFilter)

                    The flag filters allow filtering of a specific flags current state or for the player that is carrying the flag. One important use of these filters is to implement the standard rule that a team can only capture an enemy flag when their own flag is returned. This can be implemented easily using a `<flag-returned>` as the capture-filter of a flag. This can also be done with the nets return attribute. However, using the return attribute will return dropped flags, while using a filter will not.

                    The flag carried, dropped, captured and returned filters have an optional `post` attribute to only match if the flag was last returned to that post.

                        <!-- The blue flag is currently being carried by a player -->
                        <flag-carried>blue-flag</flag-carried>

                        <!-- The blue flag has been carried away & dropped from the red-post -->
                        <flag-dropped post="red-post">blue-flag</flag-dropped>

                        <!-- The yellow flag is standing at one of its posts -->
                        <flag-returned>yellow-flag</flag-returned>

                        <!-- The yellow flag is standing at the green-post -->
                        <flag-returned post="green-post">yellow-flag</flag-returned>

                        <!-- The cyan flag has been captured but not yet returned -->
                        <flag-captured>cyan-flag</flag-captured>

                        <!-- The player currently carrying the purple flag -->
                        <carrying-flag>purple-flag</carrying-flag>


                    <br/>
                    #### [Item Filters](id:itemFilters)

                    These filters can be used to filter for players with specific items in their inventory. They accept a single [item](/modules/items) element. Only the item's type, durability/damage and meta data are compared. A item's meta data includes the item's name, enchantments, etc.

                        <!-- Player has a stick named 'Blue Door Key' in their inventory -->
                        <carrying><item name="Blue Door Key" material="stick"/></carrying>

                        <!-- Player is holding a clock -->
                        <holding><item material="clock"/></holding>

                        <!-- Player is wearing a chainmail chestplate -->
                        <wearing><item material="chainmail chestplate"/></wearing>



                    <br/>
                    #### [Event Cause Filters](id:causeFilters)

                    Cause filters are used to filter an event or action according to its cause.

                .table-responsive
                    %table.table.table-striped.table-condensed
                        %thead
                            %tr
                                %th Element
                                %th Description
                        %tbody
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<cause> </cause>')
                                %td Filter an event's cause.
                            %tr
                                %th{:colspan => "2"} Cause: Actor Type
                            %tr
                                %td
                                    %code WORLD
                                %td World events such as ice melting, etc.
                            %tr
                                %td
                                    %code LIVING
                                %td Events caused by a living entity.
                            %tr
                                %td
                                    %code MOB
                                %td Events caused by a mob.
                            %tr
                                %td
                                    %code PLAYER
                                %td Events caused by a player.
                            %tr
                                %th{:colspan => "2"} Cause: Block Action
                            %tr
                                %td
                                    %code PUNCH
                                %td Events where a block is punched.
                            %tr
                                %td
                                    %code TRAMPLE
                                %td Events where a block is trampled.
                            %tr
                                %td
                                    %code MINE
                                %td Events where a block is mined.
                            %tr
                                %th{:colspan => "2"} Cause: Damage Type
                            %tr
                                %td
                                    %code MELEE
                                %td
                                    %code PROJECTILE
                            %tr
                                %td
                                    %code POTION
                                %td
                                    %code EXPLOSION
                            %tr
                                %td
                                    %code COMBUSTION
                                %td
                                    %code FALL
                            %tr
                                %td
                                    %code GRAVITY
                                    Fall and void damage.
                                %td
                                    %code VOID
                            %tr
                                %td
                                    %code SQUASH
                                %td
                                    %code SUFFOCATION
                            %tr
                                %td
                                    %code DROWNING
                                %td
                                    %code STARVATION
                            %tr
                                %td
                                    %code LIGHTNING
                                %td
                                    %code CACTUS
                            %tr
                                %td
                                    %code THORNS
                                %td


                :markdown
                    <br/>
                    #### [Player Relation Filters](id:relationFilters)

                    The relation filter is used when a player is damaged to check the relation between them and the damage cause.
                    This filter is only used in damage related contexts i.e., [damage filters](/modules/damage), and [kill rewards](/modules/killreward)

                .table-responsive
                    %table.table.table-striped.table-condensed
                        %thead
                            %tr
                                %th Element
                                %th Description
                        %tbody
                            %tr
                                %td
                                    %span.highlight
                                        %code= html_escape('<relation> </relation>')
                                %td The relation between the player and their damage cause.
                            %tr
                                %th{:colspan => "2"} Values
                            %tr
                                %td
                                    %code NEUTRAL
                                %td Event has no attacker, e.g. world damage.
                            %tr
                                %td
                                    %code SELF
                                %td Events caused by the player. (Same player same team)
                            %tr
                                %td
                                    %code ALLY
                                %td Events caused by a player on the same team. (Different player same team)
                            %tr
                                %td
                                    %code ENEMY
                                %td Events caused by an enemy player. (Different team)


                :markdown
                    <br/>
                    #### [Structural Load Filters](id:structuralLoadFilters)
                    The structural load filter checks the number of gravity blocks that are attached to the queried block.
                    It returns `ALLOW` as long as the structural load is greater than or equal to the specified value and `DENY` otherwise.

                    <span class="label label-warning">Warning</span> This filter is very computationally expensive to apply, XML authors should ensure that it is only run when absolutely necessary, e.g. by placing other filters above it. They should also not apply it to events that modify large amounts of blocks, such as explosions.

                    This filter requires the falling blocks module to be loaded otherwise it will default to abstain.

                    Example

                        <!--  Deny breaking structures longer than 3 blocks  -->
                        <not>
                            <all>
                                <cause>player</cause>
                                <filter name="structure-blocks"/>
                                <structural-load>3</structural-load>
                            </all>
                        </not>


                :markdown
                    <br/>
                    #### [Void Filter](id:voidFilter)

                    If your map is especially complex shaped you may have to use the `<void/>` tag to shape your filtered region.
                    The `<void/>` tag checks the specified regions for blocks on the bottom layer of the world. It then creates an outline of those blocks and the specified filter is only active inside or outside that outline. Bridges are usually not detected because they are not at `y=0`. This can be fixed by creating a invisible silhouette of the bridge with block 36 at `y=0`.

                    Example

                        <filters>
                            <not id="no-void">
                                <void/>
                            </not>
                        </filters>
                        <regions>
                            <apply block="no-void" message="You may not modify the void area!">
                                <region>
                                    <rectangle id="main-area" min="65,860" max="290,980"/>
                                </region>
                            </apply>
                        </regions>
