.container
    .jumbotron.subhead
        %h1
            = @page_title = "Modules"
            %p.lead Filters & Regions
    %section
        .row
            = partial('modules_sidebar')
            .col-sm-9
                .page-header
                    %h1= @page_sub_title = "Filters"
                :markdown
                    Filters are used to filter player, block, spawn and world events in regions. On their own filters do nothing, they have to be applied to regions or used in other modules to do something. Filters return one of three possible states for query and these results can be modified with filter matchers. All filters can have a `id` attribute to reference them in other parts of the XML. Groups of filters are combined with each other using [filter modifiers](#filterModifiers) to narrow the filters query.

                    ##### Filter States

                    * `ALLOW` The filter specifically allows the query.
                    * `DENY` The filter specifically denies the query.
                    * `ABSTAIN` None of the filters queried have any opinion on the subject.

                    Abstain is usually interpreted as allow, this means that if the filter doesn't explicitly deny the query it will be allowed.


                        <filters>
                            <any id="filter-name">
                                <!-- Filter elements -->
                            </any>

                            <team id="viridescent-team-filter">viridescent-team</team>

                            <!-- More filters-->
                        </filters>

                :markdown
                    <br/>
                    ### Filter Matcher Elements
                    Filters use matcher elements to do things such as blocking all player access and then allowing a certain team access.

                .table-responsive
                    %table.table.table-striped.table-condensed
                        %thead
                            %tr
                                %th{:style => "min-width: 300px;"} Element
                                %th Description
                        %tbody
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<filter id="filter1"/>')
                                %td Reference a filter by its ID.
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<team>team</team>')
                                %td Matches a team by its ID.
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<material>block</material>')
                                %td
                                    Matches blocks by their
                                    %a{:href => "/reference/inventory#material_finder"} Bukkit Material
                                    name.
                                    %br
                                    Accepts a
                                    %a{:href => "/reference/inventory#material_matchers"} Single Material Pattern
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<spawn>spawn reason</spawn>')
                                %td
                                    Matches spawn event reasons, see
                                    %a{:href=>"/modules/mobs"} mob spawning
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<mob>mob name</mob>')
                                %td
                                    Matches mobs by their name, see
                                    %a{:href=>"/modules/mobs"} mob spawning
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<entity>entity name</entity>')
                                %td Match entities, e.g. projectiles, boats, dropped items, etc.
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<kill-streak count="1"/>')
                                %td
                                    Match players with a certain range or amount of kills.
                                    %a.left-ref-link{:href=>"#killStreakFilter"} <i class="fa fa-chevron-down"></i>
                            %tr
                                %td
                                    %pre.xml
                                        %code= html_escape('<class>class name</class>')
                                %td
                                    Match players with the specified class.
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<random>decimal or range</random>')
                                %td
                                    Random chance matcher.
                                    %a.left-ref-link{:href=>"#randomFilter"} <i class="fa fa-chevron-down"></i>
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<crouching/>')
                                %td
                                    Match if the player is crouching.
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<flying/>')
                                %td
                                    Match if the player is flying.
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<can-fly/>')
                                %td
                                    Match if the player can fly.
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<objective>objective_id</objective>')
                                %td
                                    Match completed objectives.
                                    %a.left-ref-link{:href=>"#objectiveFilter"} <i class="fa fa-chevron-down"></i>
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<flag-carried>flag_id</flag-carried>')
                                %td
                                    Match if the flag is being carried by anyone.
                                    %a.left-ref-link{:href=>"#flagFilter"} <i class="fa fa-chevron-down"></i>
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<flag-dropped>flag_id</flag-dropped>')
                                %td
                                    Match if the flag is dropped on the ground.
                                    %a.left-ref-link{:href=>"#flagFilter"} <i class="fa fa-chevron-down"></i>
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<flag-returned>flag_id</flag-returned>')
                                %td
                                    Match if the flag is at the return-point.
                                    %a.left-ref-link{:href=>"#flagFilter"} <i class="fa fa-chevron-down"></i>
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<flag-captured>flag_id</flag-captured>')
                                %td
                                    Match if the flag has been captured.
                                    %a.left-ref-link{:href=>"#flagFilter"} <i class="fa fa-chevron-down"></i>
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<carrying-flag>flag_id</carrying-flag>')
                                %td
                                    Match the player carrying the specified flag.
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<cause>cause</cause>')
                                %td
                                    Filter event causes
                                    %br
                                    Accepts <code>PLAYER</code>, <code>EXPLOSION</code>, <code>COMBUSTION</code>, <code>PUNCH</code>, <code>TRAMPLE</code> & <code>MINE</code>.
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<carrying><item material=""/></carrying>')
                                %td
                                    Match if the player is carrying an item.
                                    %a.left-ref-link{:href=>"#itemFilters"} <i class="fa fa-chevron-down"></i>
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<holding><item material=""/></holding>')
                                %td
                                    Match if the player is holding an item.
                                    %a.left-ref-link{:href=>"#itemFilters"} <i class="fa fa-chevron-down"></i>
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<wearing><item material=""/></wearing>')
                                %td
                                    Match if the player is wearing an item.
                                    %a.left-ref-link{:href=>"#itemFilters"} <i class="fa fa-chevron-down"></i>
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<time>')
                                %td
                                    Filter if the specified
                                    %a{:href => "/reference/time_periods"} time period
                                    has elapsed since the match started.
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<same-team> </same-team>')
                                %td
                                    Filter if the queried player has the same team as the filter input.
                                    %br
                                    Commonly used with the
                                    %a{:href => "/modules/gamemode_ctf"} ctf
                                    gamemode.
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<victim> </victim>')
                                %td
                                    Filter if the attacked player matches the query.
                                    %br
                                    Commonly used with the
                                    %a{:href => "/modules/damage"} damage
                                    module.
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<attacker> </attacker>')
                                %td
                                    Filter if the attacking player matches the query.
                                    %br
                                    Commonly used in the
                                    %a{:href => "/modules/damage"} damage
                                    module.
                            %tr
                                %td{:colspan => "2"}
                                    %b Static Filters
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<always>')
                                %td Always return <code>ALLOW</code>. Can be referenced with the ID: <code>always</code>
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<never>')
                                %td Always return <code>DENY</code>. Can be referenced with the ID: <code>never</code>
                :markdown

                    <br/>
                    #### [Kill-Streak Filter](id:killStreakFilter)

                    The kill-streak filter is a matcher that matches players who have a specified number of kills since their last re-spawn. This filter is commonly used in [kill rewards](/modules/killreward) but can also be used to restrict access to certain locations, etc.

                    #####  Kill-Streak Filter Attributes

                .table-responsive
                    %table.table.table-striped.table-condensed
                        %thead
                            %tr
                                %th Attribute
                                %th Description
                                %th Value
                        %tbody
                            %tr
                                %td
                                    %code min
                                %td Match players with at-least this many kills.
                                %td
                                    %span.label.label-primary Number
                            %tr
                                %td
                                    %code max
                                %td Match players with a maximum of this many kills.
                                %td
                                    %span.label.label-primary Number
                            %tr
                                %td
                                    %code count
                                %td
                                    Match players with exactly this many kills.
                                    %br
                                    %i Can not be mixed with the <code>min</code> & <code>max</code> attributes.
                                %td
                                    %span.label.label-primary Number
                            %tr
                                %td
                                    %code repeat
                                %td Repeat the filter range
                                %td
                                    %span.label.label-primary true/false
                :markdown
                    Examples

                        <kill-streak min="3"/>      <!-- matches players with at least 3 kills -->
                        <kill-streak max="5"/>      <!-- matches players with at most 5 kills -->
                        <kill-streak count="4"/>    <!-- matches players with exactly 4 kills -->

                        <kill-streak id="10th-kill-filter" repeat="true" count="10"/>    <!-- match for every 10th kill -->


                    <br/>
                    #### [Random Filter](id:randomFilter)

                    This filter will randomly return either `ALLOW` or `DENY`, the chance for `ALLOW` being determined by its value. It accepts a decimal number between zero and one or a standard mathematical interval such as `[0, 1)`. Intervals are used to create mutual exclusive filters that return different results even if they are called at the same time. This can be used for a one of multiple options behavior, e.g. apply one of multiple kits when a player enters a region or spawns.

                    Examples

                        <!-- 50% chance that it will return either ALLOW or DENY -->
                        <random>0.5</random>

                        <!-- Also a 50% chance -->
                        <!-- Any number from 0.25 to 0.75 including 0.25 but excluding 0.75 -->
                        <random>[0.25, 0.75)</random>

                %p
                    %a.btn.btn-primary.btn-xs.btn-more.collapsed{:'data-target' => "#collapse-random-example", :'data-toggle' => "collapse"} Examples
                %div.collapse{:id => "collapse-random-example"}
                    :markdown
                            <filters>
                                <!-- Mutual exclusive random filters -->
                                <random id="erandom-1">[0,0.5)</random>
                                <random id="erandom-2">[0.5,1)</random>
                            </filters>

                            <regions>
                                <!-- Apply mutual exclusive randomly filtered kits -->
                                <!-- Players will get either kit-1 or kit-2 applied -->
                                <apply kit="kit-1" filter="erandom-1" region="kit-region"/>
                                <apply kit="kit-2" filter="erandom-2" region="kit-region"/>
                            </regions>

                :markdown
                    <br/>
                    #### [Objective Filter](id:objectiveFilter)

                    The objective filter allows filtering of completed objectives and additionally, for hills, the team owning the objective. The filter works with cores, destroyables, wools and hills/control-points. With cores, destroyables and wools the filter will return `ALLOW` if the objective is completed and `DENY` if it is not. Its behavior for hills/control-points is slightly different from other objectives, by default it will match the player's team instead of the objectives completion.

                    Hills or control point filters will return `ALLOW` if the player's team matches the owning team, `DENY` if it doesn't, and ignore everything non-player related. However, if the filter has a team attribute the filter will not care what is being filtered and will simply return `ALLOW` if the team specified currently owns the hill. Optional the any attribute can be used to return `ALLOW` if any team owns the hill and `DENY` otherwise.

                    #####  Objective Filter Attributes

                .table-responsive
                    %table.table.table-striped.table-condensed
                        %thead
                            %tr
                                %th Attribute
                                %th Description
                                %th Value
                        %tbody
                            %tr
                                %td
                                    %code team
                                %td If the objective has ownership, e.g. hills, match objectives belonging to this team.
                                %td
                                    %a{:href => "/modules/teams"} Team ID
                            %tr
                                %td
                                    %code any
                                %td
                                    If the objective has ownership, e.g. hills, match objectives completed by any team.
                                    %br
                                    %i Not compatible with the <code>team</code> attribute
                                %td
                                    %span.label.label-primary true/false

                :markdown
                    Examples

                        <!-- deny everything before red-core leaks and allow everything after it leaks -->
                        <objective id="rc-leaked-filter">red-core</objective>


                        <!-- allow everything if blue-team owns central-hill, and deny everything if they don't -->
                        <objective team="blue-team">central-hill</objective>

                        <!-- allow everything if the south-hill is owned and deny if it isn't -->
                        <objective any="true">south-hill</objective>

                        <!-- allow any player actions by the team currently owning north-hill -->
                        <objective>north-hill</objective>


                    <br/>
                    #### [Flag Filters](id:flagFilter)

                    The flag filters allow filtering of a specific flags current state or for the player that is carrying the flag. One important use of these filters is to implement the standard rule that a team can only capture an enemy flag when their own flag is returned. This can be implemented easily using a `<flag-returned>` as the capture-filter of a flag. This can also be done with the nets return attribute. However, using the return attribute will return dropped flags, while using a filter will not.

                    The flag carried, dropped, captured and returned filters have an optional `post` attribute to only match if the flag was last returned to that post.

                        <!-- The blue flag is currently being carried by a player -->
                        <flag-carried>blue-flag</flag-carried>

                        <!-- The blue flag has been carried away & dropped from the red-post -->
                        <flag-dropped post="red-post">blue-flag</flag-dropped>

                        <!-- The yellow flag is standing at one of its posts -->
                        <flag-returned>yellow-flag</flag-returned>

                        <!-- The yellow flag is standing at the green-post -->
                        <flag-returned post="green-post">yellow-flag</flag-returned>

                        <!-- The cyan flag has been captured but not yet returned -->
                        <flag-captured>cyan-flag</flag-captured>

                        <!-- The player currently carrying the purple flag -->
                        <carrying-flag>purple-flag</carrying-flag>


                    <br/>
                    #### [Item Filters](id:itemFilters)

                    These filters can be used to filter for players with specific items in their inventory. They accept a single [item](/modules/items) element. Only the item's type, durability/damage and meta data are compared. A item's meta data includes the item's name, enchantments, etc.

                        <!-- Player has a stick named 'Blue Door Key' in their inventory -->
                        <carrying><item name="Blue Door Key" material="stick"/></carrying>

                        <!-- Player is holding a clock -->
                        <holding><item material="clock"/></holding>

                        <!-- Player is wearing a chainmail chestplate -->
                        <wearing><item material="chainmail chestplate"/></wearing>



                    <br/>
                    #### [Void Filter](id:voidFilter)

                    If your map is especially complex shaped you may have to use the `<void/>` tag to shape your filtered region.
                    The `<void/>` tag checks the specified regions for blocks on the bottom layer of the world. It then creates an outline of those blocks and the specified filter is only active inside or outside that outline. Bridges are usually not detected because they are not at `y=0`. This can be fixed by creating a invisible silhouette of the bridge with block 36 at `y=0`.

                    Example from [Northern Mounts](https://maps.oc.tc/TDM/Standard/Northern%20Mounts/map.xml)

                        <filters>
                            <not id="no-void">
                                <void/>
                            </not>
                        </filters>
                        <regions>
                            <apply block="no-void" message="You may not modify the void area!">
                                <region>
                                    <rectangle id="main-area" min="65,860" max="290,980"/>
                                </region>
                            </apply>
                        </regions>


                    <br/>
                    ### [Filter Modifiers](id:filterModifiers)

                    Filter results can be combined and modified by putting them inside the following elements. These modifiers enable complex combinations of filters that allow or deny specific things.

                .table-responsive
                    %table.table.table-striped.table-condensed
                        %thead
                            %tr
                                %th{:style => "min-width: 85px;"} Name
                                %th Description
                        %tbody
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<not>')
                                %td Invert the filters result; allow if the child filter denies, deny if it allows, abstain otherwise.
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<one>')
                                %td Allow if <i>only one</i> of the child filters allows, deny if <i>one or more allow</i> or <i>none allow and at least one denies</i>, otherwise abstain.
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<all>')
                                %td Allow if <i>all</i> of the child filters allow, deny if <i>one or more deny</i>, otherwise abstain.
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<any>')
                                %td Allow if <i>one</i> of the child filters allows, deny if <i>none allow and at least one denies</i>, otherwise abstain.
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<allow>')
                                %td Allow if the child filter allows, otherwise abstain (transform deny to abstain).
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<deny>')
                                %td Deny if the child filter allows, otherwise abstain.


                :markdown
                    Examples

                        <filters>
                            <not id="deny-yellow-explosions">
                                <all>
                                    <team>yellow</team>
                                    <cause>explosion</cause>
                                </all>
                            </not>
                        </filters>

                    ````
                    <filters>
                        <deny id="no-tnt"><material>TNT</material></deny>
                    </filters>
                    ````

                    The player wants to place a TNT block, the filter gets asked; "Is this block place-able?". The filter checks the `<material>` matcher, it matches and returns `ALLOW`. The material matcher is contained in a `<deny>` modifier so the `ALLOW` gets turned into a `DENY`.
