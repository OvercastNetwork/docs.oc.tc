.container
    .jumbotron.subhead
        %h1= @page_title = "Modules"
        %p.lead Filters & Regions
    %section
        .row
            = partial('modules_sidebar')
            .col-sm-9
                .page-header
                    %h1= @page_sub_title = "Filters"
                :markdown
                    Filters are used to filter player, block, spawn and world events in regions. On their own filters do nothing, they have to be applied to regions to do something. Filters return one of three possible states for query and these results can be modified with filter matchers. The filter's name is used to reference it inside other filters and regions.

                    * `ALLOW` The filter specifically allows the query.
                    * `DENY` The filter specifically denies the query.
                    * `ABSTAIN` None of the filters queried have any opinion on the subject.

                    Abstain is usually interpreted as allow, this means that if the filter doesn't explicitly deny the query it will be allowed.

                        <filters>
                            <filter name="filter-name">
                                <!-- Filter elements -->
                            </filter>

                            <!-- More filters-->
                        </filters>

                :markdown
                    <br/>
                    #### Master Filters
                    These are the main filters that can be used to allow or deny all of a certain type of event.
                .table-responsive
                    %table.table.table-striped.table-condensed
                        %thead
                            %tr
                                %th{:colspan => "2"} Name
                                %th Description
                        %tbody
                            %tr
                                %td
                                    %code allow-all
                                %td
                                    %code deny-all
                                %td Filter all events.
                            %tr
                                %td
                                    %code allow-players
                                %td
                                    %code deny-players
                                %td Filter player access.
                            %tr
                                %td
                                    %code allow-blocks
                                %td
                                    %code deny-blocks
                                %td Filter block breaking and placing.
                            %tr
                                %td
                                    %code allow-world
                                %td
                                    %code deny-world
                                %td Filter block transformations such as fire spread, water flowing, etc.
                            %tr
                                %td
                                    %code allow-spawns
                                %td
                                    %code deny-spawns
                                %td Filter player spawning.
                            %tr
                                %td
                                    %code allow-entities
                                %td
                                    %code deny-entities
                                %td Filter entities.
                            %tr
                                %td
                                    %code allow-mobs
                                %td
                                    %code deny-mobs
                                %td Filter all mob spawns, regardless of type.


                :markdown
                    <br/>
                    ### Filter Matcher Elements
                    Filters use matcher elements to do things such as blocking all player access and then allowing a certain team access.

                .table-responsive
                    %table.table.table-striped.table-condensed
                        %thead
                            %tr
                                %th Element
                                %th Description
                        %tbody
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<filter name="filter1"/>')
                                %td Reference a filter by its name.
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<team>team</team>')
                                %td Matches a team by its name or ID.
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<block>block name</block>')
                                %td
                                    Matches blocks by their
                                    %a{:href => "/reference/inventory#material_finder"} Bukkit Material
                                    name.
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<spawn>spawn reason</spawn>')
                                %td
                                    Matches spawn event reasons, see 
                                    %a{:href=>"/modules/mobs"} mob spawning
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<mob>mob name</mob>')
                                %td
                                    Matches mobs by their name, see
                                    %a{:href=>"/modules/mobs"} mob spawning
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<entity>entity name</entity>')
                                %td Match entities, e.g. projectiles, boats, dropped items, etc.
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<kill-streak count="1"/>')
                                %td
                                    Match players with a certain range or amount of kills.
                                    %a.right-ref-link{:href=>"#killStreakFilter"} <i class="fa fa-share"></i>
                            %tr
                                %td
                                    %pre.xml
                                        %code= html_escape('<class>class name</class>')
                                %td
                                    Match players with the specified class.
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<random>float or range</random>')
                                %td
                                    Random chance matcher.
                                    %a.right-ref-link{:href=>"#randomFilter"} <i class="fa fa-share"></i>
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<crouching/>')
                                %td
                                    Match if the player is crouching.
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<objective>objective_id</objective>')
                                %td
                                    Match completed objectives.
                                    %a.right-ref-link{:href=>"#objectiveFilter"} <i class="fa fa-share"></i>
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<cause>cause</cause>')
                                %td
                                    Filter event causes, currently only <code>PLAYER</code> and <code>EXPLOSION</code>. 
                :markdown

                    <br/>
                    #### [Kill-Streak Filter](id:killStreakFilter)

                    The kill-streak filter is a matcher that matches players who have a specified number of kills since their last re-spawn. This filter is commonly used in [kill rewards](/modules/killreward) but can also be used to restrict access to certain locations, etc.

                    #####  Kill-Streak Filter Attributes

                .table-responsive
                    %table.table.table-striped.table-condensed
                        %thead
                            %tr
                                %th Attribute
                                %th Description
                                %th Value
                        %tbody
                            %tr
                                %td
                                    %code min
                                %td Match players with at-least this many kills.
                                %td
                                    %span.label.label-primary Number
                            %tr
                                %td
                                    %code max
                                %td Match players with a maximum of this many kills.
                                %td
                                    %span.label.label-primary Number
                            %tr
                                %td
                                    %code count
                                %td
                                    Match players with exactly this many kills.
                                    %br
                                    %i Can not be mixed with the <code>min</code> & <code>max</code> attributes.
                                %td
                                    %span.label.label-primary Number
                            %tr
                                %td
                                    %code repeat
                                %td Repeat the filter range
                                %td
                                    %span.label.label-primary true/false
                :markdown
                    Examples

                        <kill-streak min="3"/>      <!-- matches players with at least 3 kills -->
                        <kill-streak max="5"/>      <!-- matches players with at most 5 kills -->
                        <kill-streak count="4"/>    <!-- matches players with exactly 4 kills -->

                        <filter>
                            <kill-streak repeat="true" count="10"/>    <!-- match for every 10th kill -->
                        </filter>


                    <br/>
                    #### [Random Filter](id:randomFilter)

                    This filter will randomly return either `ALLOW` or `DENY`, the chance for `ALLOW` being determined by its value. It accepts a decimal number between zero and one or a standard mathematical interval such as `[0, 1)`. Intervals are used to create mutual exclusive filters that return different results even if they are called at the same time. This can be used for a one of multiple options behavior, e.g. apply one of multiple kits when a player enters a region or spawns.

                    Examples

                        <!-- 50% chance that it will return either ALLOW or DENY -->
                        <random>0.5</random>

                        <!-- Also a 50% chance -->
                        <!-- Any number from 0.25 to 0.75 including 0.25 but excluding 0.75 -->
                        <random>[0.25, 0.75)</random>

                %p
                    %a.btn.btn-primary.btn-xs.btn-more.collapsed{:'data-target' => "#collapse-random-example", :'data-toggle' => "collapse"} Examples
                %div.collapse{:id => "collapse-random-example"}
                    :markdown
                            <filters>
                                <!-- Mutual exclusive random filters -->
                                <filter name="erandom-1">
                                    <random>[0,0.5)</random>
                                </filter>
                                <filter name="erandom-2">
                                    <random>[0.5,1)</random>
                                </filter>
                            </filters>

                            <regions>
                                <!-- Apply mutual exclusive randomly filtered kits -->
                                <!-- Players will get either kit-1 or kit-2 applied -->
                                <apply kit="kit-1" filter="erandom-1">
                                    <region name="kit-region"/>
                                </apply>
                                <apply kit="kit-2" filter="erandom-2">
                                    <region name="kit-region"/>
                                </apply>
                            </regions>

                :markdown
                    <br/>
                    #### [Objective Filter](id:objectiveFilter)

                    The objective filter allows filtering of completed objectives and additionally, for hills, the team owning the objective. The filter works with cores, destroyables, wools and hills/control-points. With cores, destroyables and wools the filter will return `ALLOW` if the objective is completed and `DENY` if it is not. Its behavior for hills/control-points is slightly different from other objectives, by default it will match the player's team instead of the objectives completion.

                    Hills or control point filters will return `ALLOW` if the player's team matches the owning team, `DENY` if it doesn't, and ignore everything non-player related. However, if the filter has a team attribute the filter will not care what is being filtered and will simply return `ALLOW` if the team specified currently owns the hill. Optional the any attribute can be used to return `ALLOW` if any team owns the hill and `DENY` otherwise.

                    `NOTE:` Objectives and teams are referenced in the objective filter by their ID's rather than their name.

                    #####  Objective Filter Attributes

                .table-responsive
                    %table.table.table-striped.table-condensed
                        %thead
                            %tr
                                %th Attribute
                                %th Description
                                %th Value
                        %tbody
                            %tr
                                %td
                                    %code team
                                %td If the objective has ownership, e.g. hills, match objectives belonging to this team.
                                %td
                                    %a{:href => "/modules/teams"} Team ID
                            %tr
                                %td
                                    %code any
                                %td
                                    If the objective has ownership, e.g. hills, match objectives completed by any team.
                                    %br
                                    %i Not compatible with the <code>team</code> attribute
                                %td
                                    %span.label.label-primary true/false

                :markdown
                    Examples

                        <!-- deny everything before red-core leaks and allow everything after it leaks -->
                        <filter name="red-core-leaked">
                            <objective>red-core</objective>
                        </filter>


                        <!-- allow everything if blue-team owns central-hill, and deny everything if they don't -->
                        <filter name="blue-central-hill">
                            <objective team="blue-team">central-hill</objective>
                        </filter>

                        <!-- allow everything if the south-hill is owned and deny if it isn't -->
                        <objective any="true">south-hill</objective>

                        <!-- allow any player actions by the team currently owning north-hill -->
                        <objective>north-hill</objective>


                    <br/>
                    #### [Void Filter](id:voidFilter)

                    If your map is especially complex shaped you may have to use the `<void/>` tag to shape your filtered region.
                    The `<void/>` tag checks the specified regions for blocks on the bottom layer of the world. It then creates an outline of those blocks and the specified filter is only active inside or outside that outline. Bridges are usually not detected because they are not at `y=0`. This can be fixed by creating a invisible silhouette of the bridge with block 36 at `y=0`.

                    Example from [Northern Mounts](https://maps.oc.tc/TDM/Standard/Northern%20Mounts/map.xml)

                        <filters>
                            <filter name="no-void">
                                <not>
                                    <void/>
                                </not>
                            </filter>
                        </filters>
                        <regions>
                            <apply block="no-void" message="You may not modify the void area!">
                                <rectangle name="main-area" min="65,860" max="290,980"/>
                            </apply>
                        </regions>


                    <br/>
                    ### [Filter Modifiers](id:filterModifiers)
                    To modify filters with matchers or combine the results of multiple filters use these modifiers. The filter element defaults to `<any>` style matching.

                .table-responsive
                    %table.table.table-striped.table-condensed
                        %thead
                            %tr
                                %th{:style => "min-width: 125px;"} Name
                                %th Description
                        %tbody
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<not></not>')
                                %td Invert the filters result. Returns <code>DENY</code> if the sub filter returns <code>ALLOW</code>, <code>ALLOW</code> if the sub filter returns <code>DENY</code> and <code>ABSTAIN</code> if it returns <code>ABSTAIN</code>.
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<one></one>')
                                %td Returns <code>ALLOW</code> if exactly one of the sub-filters returns <code>ALLOW</code>, <code>ABSTAIN</code> if none of the sub-filters specify a preference on the query, and <code>DENY</code> if there are more than one sub filter that specifies <code>ALLOW</code> or none specify <code>ALLOW</code> and at least one specifies <code>DENY</code>.
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<all></all>')
                                %td Returns <code>ALLOW</code> if all of the sub-filters specify <code>ALLOW</code>, <code>ABSTAIN</code> if none of the sub-filters specify a preference on the query, and <code>DENY</code> if one or more of the sub-filters specify <code>DENY</code>.

                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<any></any>')
                                %td Returns <code>ALLOW</code> if any of the sub-filters return <code>ALLOW</code>, <code>ABSTAIN</code> if none of the sub-filters specify a preference on the query, and <code>DENY</code> if none of the sub-filters specify <code>ALLOW</code> and at least one sub filter specified <code>DENY</code>.


                :markdown
                    Examples

                        <filter name="deny-yellow-explosions">
                             <not>
                                 <all>
                                     <team>yellow</team>
                                     <cause>explosion</cause>
                                 </all>
                             </not>
                        </filter>

                    ````
                    <filters>
                        <filter name="no-tnt">
                            <not><block>TNT</block></not>
                        </filter>
                    </filters>
                    ````

                    The player wants to place a TNT block, the filter gets asked; "Is this block place-able?". The filter checks the `<block>` matcher, it matches and returns `ALLOW`. The block matcher is contained in a `<not>` modifier so the `ALLOW` gets turned into a `DENY`.

                    <br/>
                    Example from [Snowy Wars](http://maps.oc.tc/DTM/Standard/Snowy%20Wars/map.xml)

                        <filters>
                            <filter name="deny-icemelt">
                                <not><all><!-- DENY if world and ice, ALLOW if not world, ABSTAIN if world and not ice -->
                                    <any><!-- ALLOW if world, DENY else -->
                                        <filter name="allow-world"/>
                                        <filter name="deny-all"/>
                                    </any>
                                    <block>ice</block><!-- ALLOW if ice, ABSTAIN else -->
                                </all></not>
                            </filter>
                        </filters>

                    First we specify the filter and its name `(deny-icemelt)`. Then what we filter gets put into a `<all>` matcher and then into a `<not>` matcher.
                    So `<all>` that we filter has to `<not>` be true for the filter to allow.

                    We also have a `<any>` matcher with two filters in it, this means that the filter gets checked twice. Once for `allow-world` and then again for `deny-all`.

                    The following things get checked:

                        <!-- Returns allow if the the caller is world and the block is ice -->
                        <!-- So we allow natural melting of the ice but then deny it with the <not> matcher -->
                        <all>
                            <filter name="allow-world"/>
                            <block>ice</block>
                        </all>

                        <!-- Returns deny if the block is ice. -->
                        <!-- So we deny breaking of ice blocks but then allow it with the <not> matcher -->
                        <all>
                            <filter name="deny-all"/>
                            <block>ice</block>
                        </all>


                    So for the ice to be able to melt or be broken all of the following have to be true.

                    * If the caller is the world (allow-world) and the block is ice then do `<not>` allow.
                    * If the caller is anything else (deny-all) and the block is ice then allow.
                    * If the block is not ice abstain, i.e. ignore the filter and continue as normal.

                    Also see: [Viridun](https://maps.oc.tc/TDM/Standard/Viridun/map.xml)

                    <br/>
                    <hr>
                    ### Legacy Style Filters
                    <div class="alert alert-warning"><strong>Note!</strong> This filter behavior will be depreciated in proto 2.0.</div>

                    Legacy style filters use the `<allow>` and `<deny>` elements with the filter `parents=""` attribute to modify what gets filtered. This behavior is not compatible with the new format introduced in proto `v1.3.0` and can not be combined in the same filter.

                    #####  Filter Modifiers
                .table-responsive
                    %table.table.table-striped.table-condensed
                        %thead
                            %tr
                                %th Element
                                %th Description
                        %tbody
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<allow><filter name="filter1"/>..</allow>')
                                %td Allow containing filter matchers.
                            %tr
                                %td
                                    %pre
                                        %code= html_escape('<deny><filter name="filter1"/>..</deny>')
                                %td Deny containing filter matchers.
                :markdown
                    Example

                        <filters>
                            <filter name="only-red" parents="deny-players">
                                <allow><team>red</team></allow>
                            </filter>

                            <filter name="gold-blocks" parents="deny-block">
                                <allow><block>gold block</block></allow>
                            </filter>

                            <filter name="no-tnt" parents="allow-all">
                                <deny><block>TNT</block></deny>
                            </filter>
                        </filters>
